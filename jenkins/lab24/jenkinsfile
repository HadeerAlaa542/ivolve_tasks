#!/usr/bin/env groovy
@Library('jenkins-shared-library')_

pipeline {
    agent {
        label 'slave1'  // Run the pipeline on Jenkins slave
    }

    environment {
        GITHUB_REPO_URL = 'https://github.com/HadeerAlaa542/ivolve_tasks.git'  // Use root repo URL
        APP_FOLDER = 'jenkins/lab24/app3'  // Define the subdirectory containing Dockerfile
        DOCKER_REGISTRY = "hadeeralaa542"
        DOCKER_IMAGE = "app3"
        DOCKERHUB_CRED_ID = "dockerhub"
        K8S_CRED_ID = 'kube-config'
        DEPLOYMENT = 'deployment.yaml'
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    // Clone the entire repo, then navigate to the required folder
                    git url: GITHUB_REPO_URL, branch: env.BRANCH_NAME    
                }
            }
        }
        stage('Build Maven Project') {
            steps {
                script {
                    sh 'mvn clean package -DskipTests' // Build the JAR file
                }
            }
        }

        stage('Manage Docker Image') {
            steps {
                script {
                    dir(APP_FOLDER) {  // Move inside the correct folder
                        BuildandPushDockerimage(DOCKERHUB_CRED_ID, DOCKER_REGISTRY, DOCKER_IMAGE)
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    def namespaceMap = [
                        'main': 'main',
                        'stag': 'stag',
                        'dev': 'dev'
                    ]

                    def namespace = namespaceMap[env.BRANCH_NAME]
                    if (!namespace) {
                        error "Branch '${env.BRANCH_NAME}' is not mapped to any namespace. Deployment aborted!"
                    }
                    
                    dir(APP_FOLDER) {  // Move inside the correct folder for deployment
                        DeployOnKubernetes(K8S_CRED_ID, DOCKER_REGISTRY, DOCKER_IMAGE, DEPLOYMENT, namespace)
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                def namespaceMap = [
                    'main': 'main',
                    'stag': 'stag',
                    'dev': 'dev'
                ]
                echo "Deployment successful to namespace: ${namespaceMap.get(env.BRANCH_NAME, 'dev')}"
            }
        }
        failure {
            echo "Build or deployment failed."
        }
    }
}
